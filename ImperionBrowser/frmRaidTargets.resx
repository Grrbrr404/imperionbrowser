<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        3dd+rROPp6x/PdiEDV3Yhn3YiJ3Yim0RAQEAOw==
</value>
  </data>
</root>